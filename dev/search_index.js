var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SWCDatasets","category":"page"},{"location":"#SWCDatasets","page":"Home","title":"SWCDatasets","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SWCDatasets.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SWCDatasets]","category":"page"},{"location":"#SWCDatasets.SourceData-NTuple{4, Any}","page":"Home","title":"SWCDatasets.SourceData","text":"If zipfile not specified, it will be dir_data(package_name, dataset_name*\".gz\").\n\n\n\n\n\n","category":"method"},{"location":"#SWCDatasets.SourceData-NTuple{5, Any}","page":"Home","title":"SWCDatasets.SourceData","text":"If rows, columns not specified, CSV.read(srcfile, DataFrame) will be applied to get the number of rows/columns.\n\n\n\n\n\n","category":"method"},{"location":"#SWCDatasets.SourceData-NTuple{7, Any}","page":"Home","title":"SWCDatasets.SourceData","text":"If description not specified, it will be \"\".\n\n\n\n\n\n","category":"method"},{"location":"#SWCDatasets.SourceData-NTuple{8, Any}","page":"Home","title":"SWCDatasets.SourceData","text":"SourceData(srcfile, packagename, datasetname, title, zipfile, rows, columns, description, timestamps)\n\nsrcfile is the path to the source file, the package_name will be the folder that the file resides, the dataset_name will be the name of the data without extension.\n\nIf timestamps not specified, it will be today().\n\n\n\n\n\n","category":"method"},{"location":"#SWCDatasets.SourceData-Tuple{Any, Any, Any}","page":"Home","title":"SWCDatasets.SourceData","text":"If title not specified, it will be \"Data [$dataset_name] of [$package_name]\".\n\n\n\n\n\n","category":"method"},{"location":"#SWCDatasets.SourceData-Tuple{Any}","page":"Home","title":"SWCDatasets.SourceData","text":"If package_name, dataset_name not specified, (package_name, dataset_name) = get_package_dataset_name(srcfile) is applied.\n\n\n\n\n\n","category":"method"},{"location":"#SWCDatasets.compress_save!-Tuple{SourceData}","page":"Home","title":"SWCDatasets.compress_save!","text":"compress_save!(SD::SourceData; move_source = true) compress the SD.srcfile, save the zipped one to SD.zipfile, and update the /home/runner/work/SWCDatasets.jl/SWCDatasets.jl/src/../data/doc/datasets.csv. By default, move_source = true that the source file will be moved to dir_raw().\n\n\n\n\n\n","category":"method"},{"location":"#SWCDatasets.compress_save-Tuple{Any}","page":"Home","title":"SWCDatasets.compress_save","text":"compress_save(srcpath) is equivalent to compress_save!(SourceData(srcpath)) but returns SD::SourceData.\n\ncompress_save takes the same keyword arguments as compress_save!.\n\n\n\n\n\n","category":"method"},{"location":"#SWCDatasets.dataset-Tuple{AbstractString, AbstractString}","page":"Home","title":"SWCDatasets.dataset","text":"dataset(package_name::AbstractString, dataset_name::AbstractString) returns a DataFrame object unzipped from the last row returned by target_row(package_name, dataset_name). This function mimics the dataset function in RDatasets.jl.\n\n\n\n\n\n","category":"method"},{"location":"#SWCDatasets.dataset_table-Tuple{}","page":"Home","title":"SWCDatasets.dataset_table","text":"The path to the index table for datasets in SWCDatasets. If SWCDatasets is added using pkg> dev SWCDatasets in other project/environment, dataset_table() returns \"~/.julia/dev/SWCDatasets/src/../data/doc/datasets.csv\".\n\n\n\n\n\n","category":"method"},{"location":"#SWCDatasets.datasets-Tuple{}","page":"Home","title":"SWCDatasets.datasets","text":"datasets() returns the table of this dataset, and define the global variable SWCDatasets.__datasets as this table.\n\nSet ; force = true to force update SWCDatasets.__datasets with the dataset_table(); this keyword argument is intended to make some tests can work since in test dataset_table() is mutating. # todo: find a better way to deal with it.\n\n\n\n\n\n","category":"method"},{"location":"#SWCDatasets.dir_data-Tuple","page":"Home","title":"SWCDatasets.dir_data","text":"Path to the directory for the data.\n\n\n\n\n\n","category":"method"},{"location":"#SWCDatasets.dir_raw-Tuple","page":"Home","title":"SWCDatasets.dir_raw","text":"Path to the directory for the backup of the raw data; only for package internal use.\n\n\n\n\n\n","category":"method"},{"location":"#SWCDatasets.dir_to_be_converted-Tuple","page":"Home","title":"SWCDatasets.dir_to_be_converted","text":"Path to the directory for the to-be-compressed data; only for package internal use.\n\n\n\n\n\n","category":"method"},{"location":"#SWCDatasets.get_package_dataset_name-Tuple{Any}","page":"Home","title":"SWCDatasets.get_package_dataset_name","text":"Given path to the source file, get_package_dataset_name(srcpath) derive package name and dataset name from the srcpath.\n\nExample\n\nsrcpath = joinpath(\"Whatever\", \"RDatasets\", \"iris.csv\")\nSWCDatasets.get_package_dataset_name(srcpath)\n\n# output\n\n(\"RDatasets\", \"iris\")\n\n\n\n\n\n","category":"method"},{"location":"#SWCDatasets.load_original-Tuple{AbstractString}","page":"Home","title":"SWCDatasets.load_original","text":"load_original(path::AbstractString) opens path and return the read data.\n\n\n\n\n\n","category":"method"},{"location":"#SWCDatasets.return_compressed-Tuple{AbstractString}","page":"Home","title":"SWCDatasets.return_compressed","text":"return_compressed(path::AbstractString) returned compressed data.\n\nExample\n\ncompressed = return_compressed(\"data/data.csv\")\n\n\n\n\n\n","category":"method"},{"location":"#SWCDatasets.return_compressed-Tuple{Vector{UInt8}}","page":"Home","title":"SWCDatasets.return_compressed","text":"return_compressed(data::Vector{UInt8}) returned compressed data.\n\nExample\n\ndata = load_original(\"data/data.csv\")\ncompressed = return_compressed(data)\n\n\n\n\n\n","category":"method"},{"location":"#SWCDatasets.target_row-Tuple{Any, Any}","page":"Home","title":"SWCDatasets.target_row","text":"target_row returns the latest information in datasets(). Given package_name, dataset_name, target_row(package_name, dataset_name), target_row returns the last row that matches row.PackageName == package_name && row.Dataset == dataset_name\".\n\n\n\n\n\n","category":"method"},{"location":"#SWCDatasets.unzip_file-Tuple{AbstractString, AbstractString}","page":"Home","title":"SWCDatasets.unzip_file","text":"The same as dataset, but also save the unzip file.\n\n\n\n\n\n","category":"method"}]
}
